name: publish

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
        description: ref to checkout
      dockerfile:
        required: true
        type: string
        description: path to Dockerfile
      image-name:
        required: true
        type: string
        description: Docker image name
      image-tag:
        required: false
        default: "undefined"
        type: string
        description: Docker image tag

env:
  HUSKY: 0

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ["7.0.x"]

    steps:
      - name: derive tag
        id: derive-tag
        run: |
          TAG_REGEX="[\w]+?@v(.*)"
          echo "Ref: ${{ inputs.ref }}"
          echo "Tag: ${{ inputs.image-tag }}"
          
          if [ ${{ inputs.image-tag }} != "undefined" ]
          then
            echo "tag=${{ inputs.image-tag }}" >> "$GITHUB_OUTPUT"
            exit 0;
          fi
          
          if [ ${{ inputs.ref }} = "develop" ]
          then
             echo "tag=latest" >> "$GITHUB_OUTPUT"
          elif [[ ${{ inputs.ref }} =~ $TAG_REGEX ]]
          then
             echo "tag=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "No image-tag provided and failed to derive image tag from ref"
            exit 1;
          fi
          
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Log in to registry
        # This is where you will update the personal access token to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Build and push
        run: |
          IMAGE=ghcr.io/sapiensanatis/${{ inputs.image-name }}:${{ steps.derive-tag.outputs.tag }}
          
          docker build . --file ${{ inputs.dockerfile }} --tag ${IMAGE}
          docker push ${IMAGE}
