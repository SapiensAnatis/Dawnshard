@using DragaliaAPI.Features.Web
@using DragaliaAPI.Shared.Definitions.Enums;
@using DragaliaAPI.Shared.Features.TextLabel;
@using DragaliaAPI.Shared.MasterAsset;
@using DragaliaAPI.Shared.MasterAsset.Models;
@using Microsoft.Extensions.Options;

@inject IOptionsMonitor<WebOptions> Options;

<MudTooltip tabindex="0" RootStyle="width: 50px" ShowOnFocus=true Placement="Placement.Bottom" Arrow=true>
    <ChildContent>
        <MudImage Style="width: 100%; height: auto" Src="@this.imageSrc" />
    </ChildContent>
    <TooltipContent>
        @if (this.Talisman != Talismans.Empty)
        {
            @this.name
            <br />
            @this.abilityText1
            <br />
            @this.abilityText2
        } 
        else
        {
            @("Empty")
        }
    </TooltipContent>
</MudTooltip>


@code
{
    private string imageSrc = string.Empty;
    private string name = string.Empty;
    private string abilityText1 = string.Empty;
    private string abilityText2 = string.Empty;

    [Parameter]
    public Talismans Talisman { get; set; }

    [Parameter]
    public int Ability1 { get; set; }

    [Parameter]
    public int Ability2 { get; set; }


    protected override void OnParametersSet()
    {
        string src;


        if (this.Talisman == Talismans.Empty)
        {
            src = "icon/others/Icon_Blank_07_D.webp";
            this.imageSrc = this.Options.CurrentValue.GetImageSrc(src);
            return;
        }

        src = $"icon/talisman/m/{(int)this.Talisman}.webp"; // TODO: Support non-5* rarities
        this.imageSrc = this.Options.CurrentValue.GetImageSrc(src);

        Charas charaId = (Charas)(this.Talisman - 40000000);
        if (!MasterAsset.CharaData.TryGetValue(charaId, out CharaData? charaData))
            return;

        this.name = TextLabelHelper.GetText(this.Talisman) ?? this.Talisman.ToString();
        this.abilityText1 = GetAbilityText(this.Ability1, charaData);
        this.abilityText2 = GetAbilityText(this.Ability2, charaData);
    }

    private static string GetAbilityText(int ability, CharaData charaData)
    {
        if (!MasterAsset.AbilityData.TryGetValue(ability, out AbilityData? abilityData))
            return string.Empty;

        return abilityData.GetFormattedText(charaData.ElementalType, charaData.WeaponType);
    }
}
