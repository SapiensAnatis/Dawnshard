@inject IDbContextFactory<ApiContext> ContextFactory;

@using DragaliaAPI.Database;
@using Microsoft.EntityFrameworkCore;

<MudPaper Elevation="@Elevation">
    @if (this.loading)
    {
    } 
    else
    {
        <MudStack Row=true Spacing="5" Class="px-4 py-2">
            <div>
                <MudText Typo="Typo.h6">Your best time</MudText>
                <MudText GutterBottom=true>@this.OwnClearTime</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h6">Your rank</MudText>
                <MudText GutterBottom=true>@this.ownRank</MudText>
            </div>
        </MudStack>
    }
</MudPaper>

@code {
    [Parameter]
    public int QuestId { get; set; }

    [Parameter]
    public long ViewerId { get; set; }

    [Parameter]
    public int Elevation { get; set; }

    private DbTimeAttackClear? ownClear;
    private int? ownRank;
    private bool loading;

    protected override async Task OnParametersSetAsync()
    {
        this.loading = true;

        await using ApiContext context = await this.ContextFactory.CreateDbContextAsync();

        IQueryable<DbTimeAttackClear> clears = context.TimeAttackClears.Where(x => x.QuestId == this.QuestId);

        this.ownClear = await clears
            .Include(x => x.Players)
            .ThenInclude(x => x!.Player!.UserData)
            .Where(
                x => x.Players.Any(
                    y => y.Player!.UserData!.ViewerId == this.ViewerId
                )
            )
            .OrderBy(x => x.Time)
            .FirstOrDefaultAsync();

        if (this.ownClear is null)
        {
            this.loading = false;
            return;
        }

        this.ownRank = await clears.CountAsync(x => x.Time < ownClear.Time) + 1;

        this.loading = false;
    }

    private string OwnClearTime => 
        this.ownClear is null ? 
            "N/A" : 
            TimeSpan.FromSeconds(this.ownClear.Time).ToString(@"mm\:ss\.f");
}