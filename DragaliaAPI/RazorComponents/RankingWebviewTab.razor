@using DragaliaAPI.Blazor.Authentication;
@using DragaliaAPI.Database;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<ApiContext> ContextFactory;
@inject IBlazorIdentityService BlazorIdentityService;

<MudStack Spacing="3" Class="mt-2">
    <MudContainer>
        <MudText Typo="Typo.h6">Your best time</MudText>
        <MudText>@TimeSpan.FromSeconds(this.ownClear?.Time ?? 0).ToString(@"mm\:ss\.f")</MudText>

        <MudText Typo="Typo.h6">Your rank</MudText>
        <MudText>@this.ownRank</MudText>
    </MudContainer>
    <RankingTable QuestId="@QuestId" Elevation="0" EnableSearch=false />
</MudStack>
@code {
    [Parameter]
    public int QuestId { get; set; }

    [Parameter]
    public long ViewerId { get; set; }

    private DbTimeAttackClear? ownClear;
    private int? ownRank;

    protected override async Task OnParametersSetAsync()
    {
        await using ApiContext context = await this.ContextFactory.CreateDbContextAsync();

        IQueryable<DbTimeAttackClear> clears = context.TimeAttackClears.Where(x => x.QuestId == this.QuestId);

        this.ownClear = await clears
            .Include(x => x.Players)
            .ThenInclude(x => x!.Player!.UserData)
            .Where(
                x => x.Players.Any(
                    y => y.Player!.UserData!.ViewerId == this.ViewerId
                )
            )
            .OrderBy(x => x.Time)
            .FirstOrDefaultAsync();

        if (this.ownClear is null)
            return;

        this.ownRank = await clears.CountAsync(x => x.Time < ownClear.Time) + 1;
    }
}