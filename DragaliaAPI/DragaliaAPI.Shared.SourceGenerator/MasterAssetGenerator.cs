using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace DragaliaAPI.Shared.SourceGenerator;

[Generator]
public partial class MasterAssetGenerator : IIncrementalGenerator
{
    private const string Namespace = "DragaliaAPI.Shared";
    private const string AttributeName = "GenerateMasterAssetAttribute";

    private const string AttributeSourceCode =
        $@"// <auto-generated/>

namespace {Namespace}
{{
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
    public sealed class {AttributeName}<TKey, TItem> : System.Attribute
        where TKey : notnull
        where TItem : class
    {{
        public {AttributeName}(string filepath, string keyPropertyName) 
        {{
        }}
    }}
}}";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
            ctx.AddSource(
                "GenerateMasterAssetAttribute.g.cs",
                SourceText.From(AttributeSourceCode, Encoding.UTF8)
            )
        );

        IncrementalValuesProvider<MasterAssetDeclaration> provider = context
            .SyntaxProvider.ForAttributeWithMetadataName(
                $"{Namespace}.{AttributeName}`2",
                static (_, _) => true,
                TransformMasterAssetDeclarations
            )
            .SelectMany(static (list, _) => list.AsEnumerable());

        // Generate the source code.
        context.RegisterSourceOutput(provider.Collect(), (this.GenerateCode));
    }

    // csharpier-ignore
    private void GenerateCode(
        SourceProductionContext context,
        ImmutableArray<MasterAssetDeclaration> declarations
    )
    {
        StringBuilder mainClassBuilder = new();
        mainClassBuilder.Append(
            $@"// <auto-generated/>

#nullable enable

namespace DragaliaAPI.Shared.MasterAsset;

public static partial class MasterAsset
{{
"
        );

        foreach (MasterAssetDeclaration declaration in declarations)
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            string propertyName = declaration.JsonPath.Replace(".json", "");
            string fieldName = new([char.ToLower(propertyName[0]), ..propertyName[1..]]);
            string typeName =
                $"global::DragaliaAPI.Shared.MasterAsset.MasterAssetData<{declaration.FullyQualifiedKeyTypeName}, {declaration.FullyQualifiedItemTypeName}>";

            mainClassBuilder.AppendLine(
$@"    private static readonly {typeName}? {fieldName};"
            );

            mainClassBuilder.AppendLine(
$@"    public static {typeName} {propertyName} => {fieldName} ?? throw new InvalidOperationException(""MasterAsset not yet initialized!"");"
            );

            mainClassBuilder.AppendLine();
        }

        mainClassBuilder.AppendLine(
"}"
        );

        context.AddSource(
            "MasterAsset.g.cs",
            SourceText.From(mainClassBuilder.ToString(), Encoding.UTF8)
        );
    }
}
