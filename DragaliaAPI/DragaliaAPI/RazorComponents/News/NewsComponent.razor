@using DragaliaAPI.Database.Entities;
@using DragaliaAPI.Database;
@using DragaliaAPI.Features.Blazor
@using Microsoft.EntityFrameworkCore;
@inherits ServiceComponentBase
@inject IJSRuntime JsRuntime;

<MudStack Style="width: 100%" Spacing="4" Class="mb-2" AlignItems="AlignItems.Center">
    <MudStack Style="width: 95%; min-height: 70vh;">
        @foreach (NewsItem item in this.visibleNewsItems)
        {
            <MudCard Style="@(item.Time > this.lastReadDate ? "border: medium solid var(--mud-palette-info); border-radius: var(--mud-default-borderradius);" : string.Empty)">
                <MudCardHeader Style="margin-bottom: -1rem">
                    <MudStack Style="width: 100%" Spacing="-1">
                        <MudStack Style="width: 100%" AlignItems="AlignItems.Start" Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h6" Color="Color.Primary">
                                @item.Headline
                            </MudText>
                            @if (item.Time > this.lastReadDate)
                            {
                                <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.NewReleases"></MudIcon>
                            }
                        </MudStack>
                        <MudText Typo="Typo.caption">
                            @item.TimeString
                        </MudText>
                    </MudStack>
                </MudCardHeader>
                <MudCardContent>
                    @item.Description
                </MudCardContent>
            </MudCard>
        }
    </MudStack>
    <MudPagination @bind-Selected="@this.Selected" Count="@this.numPages" BoundaryCount="1" MiddleCount="2"/>
</MudStack>

@code {
    private const int PageSize = 4;
    private const string LastReadStorageKey = "lastReadNews";

    private List<NewsItem> allNewsItems = [];
    private IEnumerable<NewsItem> visibleNewsItems = [];
    private int numPages = 1;
    private int selected = 1;
    private DateTimeOffset lastReadDate;

    [InjectScoped] private ApiContext ApiContext { get; set; } = null!;

    private int Selected
    {
        get => this.selected;
        set
        {
            this.visibleNewsItems = allNewsItems.Skip(PageSize * (value - 1)).Take(PageSize);
            this.selected = value;

            // Fire-and-forget
            this.JsRuntime.InvokeVoidAsync("window.blazorExtensions.scrollToTop");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        string? lastReadDateStr = await JsRuntime.InvokeAsync<string?>("localStorage.getItem", default(CancellationToken), [LastReadStorageKey]);
        if (!DateTimeOffset.TryParse(lastReadDateStr, out this.lastReadDate))
        {
            // Do not show all news items as new on a first visit to the page
            this.lastReadDate = DateTimeOffset.UtcNow;
        }

        this.allNewsItems = await this.ApiContext.NewsItems
            .Where(x => !x.Hidden)
            .OrderByDescending(x => x.Date)
            .Select(x => new NewsItem(x))
            .ToListAsync();

        this.numPages = (int)Math.Ceiling((double)this.allNewsItems.Count / PageSize);
        this.visibleNewsItems = this.allNewsItems.Take(PageSize);

        this.StateHasChanged();

        string newLastReadDate = DateTimeOffset.UtcNow.ToString("O");
        ValueTask _ = JsRuntime.InvokeVoidAsync("localStorage.setItem", default(CancellationToken), [LastReadStorageKey, newLastReadDate]);
    }

    private class NewsItem
    {
        public NewsItem(DbNewsItem dbNewsItem)
        {
            this.Headline = dbNewsItem.Headline;
            this.Time = dbNewsItem.Date;
            this.TimeString = $"{dbNewsItem.Date:dd/MM/yyyy HH:mm} UTC";
            this.Description = new((builder) => builder.AddMarkupContent(0, dbNewsItem.Description));
        }

        public string Headline { get; }

        public DateTimeOffset Time { get; }

        public string TimeString { get; }

        public RenderFragment Description { get; }
    }
}