@inject IDbContextFactory<ApiContext> ApiContextFactory
@inject IBlazorIdentityService BlazorIdentityService
@inject ILogger<RankingTable> Logger

@using DragaliaAPI.Blazor.Authentication;
@using DragaliaAPI.Database;
@using DragaliaAPI.Database.Entities;
@using DragaliaAPI.RazorComponents.TimeAttack.Team
@using DragaliaAPI.Shared.MasterAsset;
@using DragaliaAPI.Shared.MasterAsset.Models;
@using Microsoft.EntityFrameworkCore;
@using MudBlazor;
@using MudBlazor.Components;
@using System.Collections.Immutable;
@using System.Diagnostics;
@using System.Diagnostics.CodeAnalysis;


<MudTable 
    ServerData="@(new Func<TableState, Task<TableData<Clear>>>(ServerReload))"
    Style="width: 100%"
    Class="@this.Class"
    Elevation="@this.Elevation"
    @ref=table
    >
    <ToolBarContent>
        <MudStack Row=true AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Style="width: 100%">
            <MudText Typo="Typo.h6">Clears</MudText>
            <MudSpacer/>
            @if (EnableSearch) 
            {
                <MudTextField 
                    T="string"
                    ValueChanged="@(s=>OnSearch(s))"
                    Placeholder="Search players"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Style="margin-top: 0 !important; align-self: end" />
            }
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Rank</MudTh>
        <MudTh>@(this.isCoOp ? "Players" : "Player")</MudTh>
        <MudTh>Time</MudTh>
        <MudTh>Team</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Rank">@context.Rank</MudTd>
        <MudTd DataLabel="Players">@context.FormattedNames</MudTd>
        <MudTd DataLabel="Time">@context.FormattedTime</MudTd>
        <MudTd DataLabel="Team">
            <MudStack Row=true AlignItems="AlignItems.Center">
                <TeamOverview Units="@context.Units"/>
                <MudSpacer/>
                <MudToggleIconButton Icon="@Icons.Material.Outlined.ExpandMore"  ToggledIcon="@Icons.Material.Outlined.ExpandLess" ToggledChanged="@((toggled) => OnShowDetailsPressed(context.Rank, toggled))"/>
            </MudStack>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td class="pa-3" colspan="4">
                    <MudText Typo="Typo.body1" GutterBottom=true>Team composition</MudText>
                    <TeamDetails Units="@context.Units"/>
                </td>
            </MudTr>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string? searchString;
    private MudTable<Clear>? table = new() { };
    private IEnumerable<Clear> data = Enumerable.Empty<Clear>();

    private bool isCoOp;

    [Parameter]
    public int? QuestId { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public int Elevation { get; set; }

    [Parameter]
    public bool EnableSearch { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        if (this.QuestId != null && MasterAsset.QuestData.TryGetValue(this.QuestId.Value, out QuestData? questData))
            this.isCoOp = questData.CanPlayCoOp;

        if (this.table is not null)
            await this.table.ReloadServerData();

       
    }

    private async Task<TableData<Clear>> ServerReload(TableState state)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        Logger.LogDebug("Fetching data for quest {quest}", this.QuestId);

        await using ApiContext context = await this.ApiContextFactory.CreateDbContextAsync();

        if (this.QuestId is null)
            return new TableData<Clear>() { Items = Enumerable.Empty<Clear>(), TotalItems = 0 };

        IQueryable<DbTimeAttackClear> clearQuery = context.TimeAttackClears
            .Include(x => x.Players)
            .ThenInclude(x => x.Units)
            .Include(x => x.Players)
            .ThenInclude(x => x.Player.UserData)
            .Where(x => x.QuestId == this.QuestId)
            .OrderBy(x => x.Time);


        // We must do searching and paging after loading the entire result set, so that our rank numbers are accurate
        List<DbTimeAttackClear> queryResults = await clearQuery.ToListAsync();
        IEnumerable<Clear> filteredEnumerable = queryResults
            .DistinctBy(x => x.PlayersHash)
            .Select(
                (x, index) => new Clear(x, index, this.isCoOp)
            );

        if (!string.IsNullOrEmpty(searchString))
        {
            filteredEnumerable = filteredEnumerable.Where(
                x =>
                    x.Names.Any(
                        y =>
                            y.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    )
            );
        }

        List<Clear> filteredList = filteredEnumerable.ToList();
        IEnumerable<Clear> pagedEnumerable = filteredList.Skip(state.PageSize * state.Page).Take(state.PageSize);

        stopwatch.Stop();
        Logger.LogDebug("Fetched data in {t} ms", stopwatch.ElapsedMilliseconds);

        this.data = pagedEnumerable;
        return new TableData<Clear>() { Items = pagedEnumerable, TotalItems = filteredList.Count };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }

    private class Clear
    {
        public int Rank { get; init; }

        public required IEnumerable<string> Names { get; init; }

        public required DbTimeAttackClearUnit[] Units { get; init; }

        public float Time { get; init; }

        public string FormattedNames => string.Join(", ", this.Names.Order());

        public string FormattedTime => TimeSpan.FromSeconds(this.Time).ToString(@"mm\:ss\.f");

        public bool ShowDetails { get; set; }

        [SetsRequiredMembers]
        public Clear(DbTimeAttackClear dbClear, int index, bool isCoop) 
        {
            this.Rank = index + 1;
            this.Time = dbClear.Time;
            this.Names = dbClear.Players
                .OrderBy(x => x.DeviceAccountId)
                .Select(y => y.Player?.UserData?.Name ?? "null")
                .ToList();

            if (isCoop) 
            {
                this.Units = dbClear.Players
                    .OrderBy(x => x.DeviceAccountId)
                    .Select(x => x.Units.OrderBy(x => x.UnitNo).FirstOrDefault())
                    .Where(x => x is not null)
                    .Select(x => x!)
                    .ToArray();
            }
            else
            {
                this.Units = dbClear.Players
                    .SelectMany(x => x.Units)
                    .OrderBy(x => x.UnitNo)
                    .ToArray();
            }
        }
    }

    private void OnShowDetailsPressed(int rank, bool toggled)
    {
        Clear? clear = this.data.FirstOrDefault(x => x.Rank == rank);
        if (clear is not null)
        {
            clear.ShowDetails = toggled;
        }
    }
}